// Redis KEYs are printable ASCII which can be of 512MB

/* STRING */
SET student:name "Habib" // store the value
SET student:name "Habib" XX // save the value only if the key exists. i.e. update
SET student:name "Habib" NX // store the value only if the key does not exists.
SET student:name "Habib" PX 50000 // save the value with setTime 50000 miliseconds
SET student:name "Habib" EX 50 // save the value with setTime 50000 seconds
SETEX mykey 10 "Hello" // Set key to hold the string value and set key to timeout after a given number of seconds. This command is equivalent to executing the following commands: "SET mykey 'Hello'" then "EXPIRE mykey 10". 
PSETEX mykey 1000 "Hello" // SET the value in miliseconds
SETNX mykey "Hello" // "SET if Not eXists"
MSET key1 "Hello" key2 "World" // set multiple key_values. MSET is atomic, so all given keys are set at once.

SET mykey "10"
INCR mykey // Increments the number stored at key by one.
INCRBY mykey 5 // Increments the number stored at key by increment(5 in this case)
DECR mykey // Decrements the number stored at key by one
DECRBY mykey 3 // Decrements the number stored at key by decrement(3 in this case)

APPEND mykey "Hello"
APPEND mykey " World"
GET mykey // "Hello World"

STRLEN mykey // get the lenght of mykey

GET student:name // get the value

TTL student:name // Returns the remaining time to live of a key that has a timeout

DEL student:name // delete the value(blocking)
UNLINK student:name // get the value(non-blocking. Just unlink the key and remove it asynchronously)

SET student:age 29
SET student:firstname Ahsan
SET student:lastname "Habib"
DECRBY student:age 3 // some commands will look at the data type and encoding to verify whether the command can be applied
TYPE student:age // "string"
OBJECT ENCODING student:age // "int"
OBJECT ENCODING student:firstname // "embstr"
OBJECT ENCODING student:lastname // "embstr"


/* HASH */
// 1 Hash can store upto 1 billion field-value pairs
HMSET myhash field1 "Hello" field2 "World" // Sets the specified fields to their respective values in the hash stored at key.
HSETNX myhash field "World" // SET the field value if the field does not exist
HGET myhash field1 // GET value of a single field
HMGET myhash field1 field2 nofield // GET values of multiple fields. Returns the values associated with the specified fields in the hash stored at key.
HGETALL myhash // Returns all fields and values of the hash stored at key. In the returned value, every field name is followed by its value, so the length of the reply is twice the size of the hash.
HEXISTS myhash field2 // check the existence of field2 in HASH myhash.
HDEL myhash field1 field1 // Removes the specified fields from the hash stored at key
HKEYS myhash // Returns all field names in the hash stored at key
HVALS myhash // Returns all values in the hash stored at key
HINCRBY myhash field 5 // Increments the number stored at field in the hash stored at key by increment
HLEN myhash // Returns the number of fields contained in the hash stored at key


/* Lists */
LPUSH mylist "world" 1 2 3 4 5 "Hello" // Insert all the specified values at the head of the list stored at key
LRANGE mylist 0 6 // Returns the specified elements of the list stored at key.
LRANGE mylist 0 -1 // These offsets can also be negative numbers indicating offsets starting at the end of the list. For example, -1 is the last element of the list, -2 the penultimate, and so on.
LPOP mylist // Removes and returns the first element of the list stored at key
RPUSH mylist "hello" // Insert all the specified values at the tail of the list stored at key
RPOP mylist // Removes and returns the last element of the list stored at key
LLEN mylist // Returns the length of the list stored at key
LINDEX mylist 0 // Returns the element at index index in the list stored at key
LSET mylist 3 "four" // Sets the list element at index to value. SET/Update the value at the mentioned index
LPUSHX myotherlist "Hello" // Inserts value at the head of the list stored at key, only if key already exists and holds a list
LINSERT mylist BEFORE "World" "There" // Inserts value in the list stored at key either before or after the reference value pivot
LINSERT mylist AFTER "World" "There" // Inserts value in the list stored at key either before or after the reference value pivot


/* SETs */
SADD myset "Hello" // Add the specified members to the set stored at key
SMEMBERS myset // Returns all the members of the set value stored at key
SCARD myset // Returns the set cardinality (number of elements) of the set stored at key
SDIFF key1 key2 // Returns the members of the set resulting from the difference between the first set and all the successive sets
SDIFFSTORE key key1 key2 // This command is equal to SDIFF, but instead of returning the resulting set, it is stored in destination(key)
SUNION key1 key2 // Returns the members of the set resulting from the union of all the given sets
SUNIONSTORE key key1 key2 // This command is equal to SUNION, but instead of returning the resulting set, it is stored in destination(key)
SINTER key1 key2 // Returns the members of the set resulting from the intersection of all the given sets
SINTERSTORE key key1 key2 // This command is equal to SINTER, but instead of returning the resulting set, it is stored in destination(key)
SREM myset "value" // Remove the specified members from the set stored at key
SPOP myset 3 // Removes and returns one or more random elements from the set value store at key
SMOVE sourceSet destinationSet "value" // Move member from the set at source to the set at destination. This operation is atomic


/* SORTED SETs */
ZADD myzset 1 "one" 2 "two" 3 "three" 4 "four" 5 "five" // Adds all the specified members with the specified scores to the sorted set stored at key
ZRANGE myzset 2 3 [WITHSCORES] // Returns the specified range of elements in the sorted set stored at key. The elements are considered to be ordered from the lowest to the highest score. Lexicographical order is used for elements with equal score.
ZREVRANGE myzset 0 -1 [WITHSCORES] // Returns the specified range of elements in the sorted set stored at key. The elements are considered to be ordered from the highest to the lowest score. Lexicographical order is used for elements with equal score.
ZRANK myzset "three" // Returns the rank/index of member in the sorted set stored at key, with the scores ordered from low to high
ZREVRANK myzset "one" // Returns the rank/index of member in the sorted set stored at key, with the scores ordered from high to low
ZSCORE myzset "one" // Returns the score of member in the sorted set at key
ZCOUNT myzset 1 (3 // Returns the number of elements in the sorted set at key with a score between min and max. { (1 5 === 1 < score <= 5 }, { (5 (10 === 5 < score < 10 }
ZRANGEBYSCORE myzset (1 (2 // Returns all the elements in the sorted set at key with a score between min and max (including elements with score equal to min or max). { (1 5 === 1 < score <= 5 }, { (5 (10 === 5 < score < 10 }
ZREM myzset "two" // Matches by the value not by the Score. Removes the specified members from the sorted set stored at key. Non existing members are ignored.
ZCARD myzset // Returns the sorted set cardinality (number of elements) or length of the sorted set stored at key





















